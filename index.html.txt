<!DOCTYPE html>
<head>
  <title>Face Login</title>
   <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="https://replit.com/@RaunakNath/GTM#favicon.ico" type="image/x-icon">
<style>/* Centered content */
div, button{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
}

/* Beautiful list */
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

li {
  margin-bottom: 10px;
}

/* 3D click colorful effect */
button {
  border: none;
  border-radius: 4px;
  background-color: #4CAF50;
  color: #fff;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(.25,.8,.25,1);
  align-self: middle;
}
.btn-3d {
  display: block;
  margin: 0 auto;
}
button:hover {
  box-shadow: 0 5px 15px rgba(0,0,0,.15);
  transform: translateY(-3px);
}

button:focus {
  outline: none;
  box-shadow: 0 5px 15px rgba(0,0,0,.15), 0 0 0 3px rgba(76, 175, 80, .5);
}
  body {
  color: whitesmoke;
  background: #283048;  /* fallback for old browsers */
background: -webkit-linear-gradient(to right, #859398, #283048);  /* Chrome 10-25, Safari 5.1-6 */
background: linear-gradient(to right, #859398, #283048); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */


}

</style>
</head>
<body>
<div class="center-content">
  <ul class="beautiful-list">
    <li>Point Your Face Towards Your Phone For ID</li>
    <li>Allow Camera Access</li>
    <li>Wait for 3 seconds</li>
  </ul>
</div>
<button type="button" onclick="init()"  class="btn-3d">Start</button>

  <div id="webcam-container"></div>
  <div id="label-container"></div>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
  <script type="text/javascript">
  
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/1_kMXPqdl/";

    let model, webcam, labelContainer, maxPredictions, goClassProb;

    // Load the image model and setup the webcam
    async function init() {
      const modelURL = URL + "model.json";
      const metadataURL = URL + "metadata.json";

      // load the model and metadata
      // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
      // or files from your local hard drive
      // Note: the pose library adds "tmImage" object to your window (window.tmImage)
      model = await tmImage.load(modelURL, metadataURL);
      maxPredictions = model.getTotalClasses();

      // Convenience function to setup a webcam
      const flip = true; // whether to flip the webcam
      webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
      await webcam.setup(); // request access to the webcam
      await webcam.play();
      webcam.update();
      window.requestAnimationFrame(loop);

      // append elements to the DOM
      document.getElementById("webcam-container").appendChild(webcam.canvas);
      labelContainer = document.getElementById("label-container");
      for (let i = 0; i < maxPredictions; i++) { // and class labels
        labelContainer.appendChild(document.createElement("div"));
      }
    }

    async function loop() {

      webcam.update(); // update the webcam frame
      predict();
    }
    //window.requestAnimationFrame(loop);




    loop();

    // run the webcam image through the image model
    async function predict() {
      // predict can take in an image, video or canvas html element

      const prediction = await model.predict(webcam.canvas);
      for (let i = 0; i < maxPredictions; i++) {
        const classPrediction =
          prediction[i].className + ": " + prediction[i].probability.toFixed(2);
        labelContainer.childNodes[i].innerHTML = classPrediction
        const goClassIndex = [i] // set the index of the "GO" class here
        const goClassProb = prediction[goClassIndex].probability.toFixed(2); // get the probability of the "GO" class
       if (goClassProb > 0.70) {
        window.location.assign("https://html-css-js-3.raunaknath.repl.co");
      } else {
        window.location.assign("https://gtm.raunaknath.repl.co/wish.html");
      
    }
        
      }
    }
      
    
    





    

  </script>
  </body>